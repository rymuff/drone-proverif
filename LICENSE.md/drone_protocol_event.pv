free ch: channel.
free ch_priv: channel [private].
type pkey.
type skey.
type key.
type certificate.

(* Test whether s is secret *)

free s: bitstring [private].
set attacker = active.

event acceptsClient(key).
event termServer(key).
query attacker(s).
query x: key; inj-event(termServer(x))==>inj-event(acceptsClient(x)).

(* Asymmetric encryption *)

fun pk(skey): pkey.

fun aenc(bitstring, pkey): bitstring.
	reduc forall m: bitstring, k: skey; adec(aenc(m,pk(k)),k) = m.

(* Certificate *)

fun gencert(pkey, skey): certificate.
	reduc forall k: skey; getpkey(gencert(pk(k), k)) = pk(k).

(* Signature *)

fun sign(bitstring, skey): bitstring.
	reduc forall m: bitstring, k: skey; getmess(sign(m,k)) = m.
	reduc forall m: bitstring, k: skey; checksign(sign(m,k), pk(k)) = m.

fun sign_key(key, skey): bitstring.
	reduc forall seckey: key, k: skey; getkey(sign_key(seckey,k)) = seckey.
	reduc forall seckey: key, k: skey; checksign_key(sign_key(seckey,k), pk(k)) = seckey.

fun sign_cert(certificate, skey): certificate.
	reduc forall cert: certificate, k: skey; getcert(sign_cert(cert,k)) = cert.
	reduc forall cert: certificate, k: skey; checksign_cert(sign_cert(cert,k), pk(k)) = cert.

(* Concatenate *)

fun conc(bitstring, bitstring): bitstring.

type G.
type PASSWD.


(* Shared key encryption *)

fun enc(bitstring, key): bitstring.
reduc forall x: bitstring, y: key; dec(enc(x,y),y) = x.

(* Key derivation function *)

fun PBKDF2(bitstring, bitstring): key.

(* HMAC: const. *)

const hmac_opad: bitstring [data].
const hmac_ipad: bitstring [data].

(* Hash *)

fun H(bitstring): bitstring.

(* HMAC *)

reduc forall pwd: PASSWD, text: bitstring;
	HMAC(pwd, text) = H(( (pwd, hmac_opad), H(((pwd, hmac_ipad), text)))).
reduc forall pwd: PASSWD, text: bitstring;
	checkhmac(H(((pwd, hmac_opad), H(((pwd, hmac_ipad), text)))), pwd) = text.

(* process *)

let drone(privKey_d: skey, pubKey_d: pkey, signed_cert_d: certificate, pubKey_CA: pkey) =
(
	new id: bitstring;
	new nonce_d: bitstring;
	out(ch, (id, nonce_d, signed_cert_d));
	
	in(ch, recv_nonce_cert: bitstring);
	let (recv_signed_nonce_gs: bitstring, recv_signed_cert_gs: certificate) = recv_nonce_cert in

	let cert_gs = getcert(recv_signed_cert_gs) in
	let valid_cert_gs = checksign_cert(recv_signed_cert_gs, pubKey_CA) in
	if cert_gs = valid_cert_gs then 
		let pk_gs = getpkey(cert_gs) in
		let nonce_d_gs = getmess(recv_signed_nonce_gs) in
		let valid_nonce_d_gs = checksign(recv_signed_nonce_gs, pk_gs) in
		if nonce_d_gs = valid_nonce_d_gs then
			in(ch, recv_signed_enc_pms: bitstring);
			
			let enc_pms = getmess(recv_signed_enc_pms) in
			let valid_enc_pms = checksign(recv_signed_enc_pms, pk_gs) in 
			if enc_pms = valid_enc_pms then
				let pms_d = adec(enc_pms, privKey_d) in 
				let k_d = PBKDF2(pms_d, nonce_d_gs) in event acceptsClient(k_d);
				out(ch, enc(s, k_d));

	0
).

let gs(privKey_gs: skey, pubKey_gs: pkey, signed_cert_gs: certificate, pubKey_CA: pkey) =
(
	in(ch, recv_hello: bitstring);
	let (recv_id_d: bitstring, recv_nonce_d: bitstring, recv_signed_cert_d: certificate) = recv_hello in
	
	new nonce_gs: bitstring;
	let concatenated_nonce = conc(recv_nonce_d, nonce_gs) in
	let signed_nonce = sign(concatenated_nonce, privKey_gs) in
	out(ch, (signed_nonce, signed_cert_gs));
	
	let cert_d = getcert(recv_signed_cert_d) in
	let valid_cert_d = checksign_cert(recv_signed_cert_d, pubKey_CA) in
	if cert_d = valid_cert_d then
		let pk_d = getpkey(cert_d) in
		new pms_gs: bitstring;
		let k_gs = PBKDF2(pms_gs, concatenated_nonce) in 

		let signed_enc_pms = sign(aenc(pms_gs, pk_d), privKey_gs) in
		out(ch, signed_enc_pms);

		in(ch, recv_sec: bitstring);
		let s1 = dec(recv_sec, k_gs) in event termServer(k_gs);
	0
).


process
	new privKey_CA: skey;
	let pubKey_CA = pk(privKey_CA) in

	new privKey_gs: skey;
	let pubKey_gs = pk(privKey_gs) in
	let cert_gs = gencert(pubKey_gs, privKey_gs) in
	let signed_cert_gs = sign_cert(cert_gs, privKey_CA) in 

	new privKey_d: skey;
	let pubKey_d = pk(privKey_d) in
	let cert_d = gencert(pubKey_d, privKey_d) in
	let signed_cert_d = sign_cert(cert_d, privKey_CA) in 

	out(ch, (pubKey_CA, pubKey_gs, pubKey_d));

( (!drone(privKey_d, pubKey_d, signed_cert_d, pubKey_CA)) |
  (!gs(privKey_gs, pubKey_gs, signed_cert_gs, pubKey_CA)))
